/* liblunar-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Lunar", lower_case_cprefix = "lunar_")]
namespace Lunar {
	[CCode (cheader_filename = "lunar/lunar-date.h")]
	public class Date : GLib.Object {
		[CCode (has_construct_function = false)]
		public Date ();
		public static GLib.Quark error_quark ();
		public void free ();
		public unowned string get_jieri (string delimiter);
		public void set_lunar_date (GLib.DateYear year, GLib.DateMonth month, GLib.DateDay day, uint8 hour, bool isleap) throws GLib.Error;
		public void set_solar_date (GLib.DateYear year, GLib.DateMonth month, GLib.DateDay day, uint8 hour) throws GLib.Error;
		public unowned string strftime (string format);
	}
	[CCode (cprefix = "LUNAR_DATE_ERROR_", cheader_filename = "lunar/lunar-date.h")]
	public errordomain DateError {
		INTERNAL,
		YEAR,
		MONTH,
		DAY,
		HOUR,
		LEAP
	}
	[CCode (cheader_filename = "lunar/lunar-main.h")]
	public const int LIBLUNAR_MAJOR_VERSION;
	[CCode (cheader_filename = "lunar/lunar-main.h")]
	public const int LIBLUNAR_MICRO_VERSION;
	[CCode (cheader_filename = "lunar/lunar-main.h")]
	public const int LIBLUNAR_MINOR_VERSION;
	[CCode (cheader_filename = "lunar/lunar-main.h")]
	public static unowned string check_version (uint required_major, uint required_minor, uint required_micro);
	[CCode (cheader_filename = "lunar/lunar-main.h")]
	public static void init ([CCode (array_length_pos = 0.9)] ref unowned string[] argv);
}
